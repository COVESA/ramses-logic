name: CMake

# This is derived from the standard CMake template for github actions.
# For more details on the settings used, have a look at the template in the marketplace

# Only pushes and PRs against the master branch are built
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILD_TYPE: Debug

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v2

    - name: Fetch submodules windows
      # Recursively checkout submodules
      # TODO Violin use ssh and shallow clone to save resources
      run: |
        git submodule update --init --recursive
      if: ${{ matrix.os == 'windows-latest' }}

    - name: Fetch submodules linux
      # Recursively checkout submodules
      # TODO Violin use ssh and shallow clone to save resources
      run: |
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive
      if: ${{ matrix.os == 'ubuntu-latest' }}

    - name: Install clang and clang-tidy
      run: |
        set -x
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        echo "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-12 main\ndeb-src http://apt.llvm.org/bionic/ llvm-toolchain-bionic-12 main\n" | sudo tee -a /etc/apt/sources.list
        sudo sh -c "curl -o - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -" \
        sudo apt-get update
        sudo apt-get install -y clang-12 clang-tidy-12 llvm-12
        sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-12 100
      if: ${{ matrix.os == 'ubuntu-latest' }}

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake (Windows)
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      if: ${{ matrix.os == 'windows-latest' }}

    - name: Configure CMake (Linux)
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        cmake $GITHUB_WORKSPACE \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \
            -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/cmake/toolchain/Linux_X86_64_llvm.toolchain \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      if: ${{ matrix.os == 'ubuntu-latest' }}

    - name: Run clang-tidy
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        compile_commands_path=$(pwd)/compile_commands.json
        echo "compile_commands_path: $compile_commands_path"
        cd $GITHUB_WORKSPACE
        $GITHUB_WORKSPACE/ci/scripts/clang-tidy-wrapper.py \
        --config $GITHUB_WORKSPACE/ci/scripts/config/clang-tidy-wrapper.yaml \
        $compile_commands_path
      if: ${{ matrix.os == 'ubuntu-latest' }}
