#  -------------------------------------------------------------------------
#  Copyright (C) 2020 BMW AG
#  -------------------------------------------------------------------------
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, You can obtain one at https://mozilla.org/MPL/2.0/.
#  -------------------------------------------------------------------------

---
Checks:
    '-*,

    boost-use-to-string,

    # We are not using abseil
    #abseil-*,

    # Android specific checks
    #android-*,

    # Coding style, projects can optionally enable this.
    #bugprone-argument-comment,
    bugprone-assert-side-effect,
    bugprone-bad-signal-to-kill-thread,
    bugprone-bool-pointer-implicit-conversion,
    # Incompatible with C++ attribute fallthrough in switch/case statements.
    #bugprone-branch-clone,
    bugprone-copy-constructor-init,
    bugprone-dangling-handle,
    bugprone-dynamic-static-initializers,
    bugprone-exception-escape,
    bugprone-fold-init-type,
    bugprone-forward-declaration-namespace,
    bugprone-forwarding-reference-overload,
    bugprone-inaccurate-erase,
    bugprone-incorrect-roundings,
    bugprone-infinite-loop,
    bugprone-integer-division,
    bugprone-lambda-function-name,
    bugprone-macro-parentheses,
    bugprone-macro-repeated-side-effects,
    bugprone-misplaced-operator-in-strlen-in-alloc,
    bugprone-misplaced-widening-cast,
    bugprone-move-forwarding-reference,
    bugprone-multiple-statement-macro,
    # Alias: cppcoreguidelines-narrowing-conversions
    #bugprone-narrowing-conversions,
    bugprone-not-null-terminated-result,
    bugprone-parent-virtual-call,
    bugprone-posix-return,
    bugprone-signed-char-misuse,
    bugprone-sizeof-container,
    bugprone-sizeof-expression,
    bugprone-string-constructor,
    bugprone-string-integer-assignment,
    bugprone-string-literal-with-embedded-nul,
    bugprone-suspicious-enum-usage,
    bugprone-suspicious-memset-usage,
    bugprone-suspicious-missing-comma,
    bugprone-suspicious-semicolon,
    bugprone-suspicious-string-compare,
    bugprone-swapped-arguments,
    bugprone-terminating-continue,
    bugprone-throw-keyword-missing,
    bugprone-too-small-loop-variable,
    bugprone-undefined-memory-manipulation,
    bugprone-undelegated-constructor,
    bugprone-unhandled-self-assignment,
    bugprone-unused-raii,
    bugprone-unused-return-value,
    bugprone-use-after-move,
    bugprone-virtual-near-miss,

    # Alias: misc-static-assert
    #cert-dcl03-c,
    cert-dcl16-c,
    cert-dcl21-cpp,
    cert-dcl50-cpp,
    # Alias: misc-new-delete-overloads
    #cert-dcl54-cpp,
    cert-dcl58-cpp,
    cert-dcl59-cpp,
    cert-env33-c,
    # Alias: misc-throw-by-value-catch-by-reference
    #cert-err09-cpp,
    cert-err34-c,
    cert-err52-cpp,
    # This prevents defining any global const that is not a POD (std::string/vectors/...)
    #cert-err58-cpp,
    cert-err60-cpp,
    # Alias: misc-throw-by-value-catch-by-reference
    #cert-err61-cpp,
    # Alias: misc-non-copyable-objects
    #cert-fio38-c,
    #cert-flp30-c,
    cert-mem57-cpp,
    # Alias: cert-msc50-cpp
    #cert-msc30-c,
    # Alias: cert-msc51-cpp
    #cert-msc32-c,
    cert-msc50-cpp,
    cert-msc51-cpp,
    # Alias: performance-move-constructor-init
    #cert-oop11-cpp,
    # Alias: bugprone-unhandled-self-assignment
    #cert-oop54-cpp,
    cert-oop58-cpp,
    # Alias: bugprone-bad-signal-to-kill-thread
    #cert-pos44-c

    # No documentation available
    #clang-analyzer-apiModeling.google.GTest,
    # No documentation available
    #clang-analyzer-apiModeling.llvm.CastValue,
    # No documentation available
    #clang-analyzer-apiModeling.llvm.ReturnValue,
    clang-analyzer-apiModeling.StdCLibraryFunctions,
    # No documentation available
    #clang-analyzer-apiModeling.TrustNonnull,
    clang-analyzer-core.CallAndMessage,
    clang-analyzer-core.DivideZero,
    clang-analyzer-core.DynamicTypePropagation,
    clang-analyzer-core.NonNullParamChecker,
    clang-analyzer-core.NonnilStringConstants,
    clang-analyzer-core.NullDereference,
    clang-analyzer-core.StackAddrEscapeBase,
    clang-analyzer-core.StackAddressEscape,
    clang-analyzer-core.UndefinedBinaryOperatorResult,
    clang-analyzer-core.VLASize,
    clang-analyzer-core.builtin.BuiltinFunctions,
    clang-analyzer-core.builtin.NoReturnFunctions,
    clang-analyzer-core.uninitialized.ArraySubscript,
    clang-analyzer-core.uninitialized.Assign,
    clang-analyzer-core.uninitialized.Branch,
    clang-analyzer-core.uninitialized.CapturedBlockVariable,
    clang-analyzer-core.uninitialized.UndefReturn,
    clang-analyzer-cplusplus.InnerPointer,
    clang-analyzer-cplusplus.Move,
    clang-analyzer-cplusplus.NewDelete,
    clang-analyzer-cplusplus.NewDeleteLeaks,
    clang-analyzer-cplusplus.PureVirtualCall,
    clang-analyzer-cplusplus.SelfAssignment,
    clang-analyzer-cplusplus.SmartPtr,
    clang-analyzer-cplusplus.VirtualCallModeling,
    clang-analyzer-deadcode.DeadStores,
    # We are not using Fuchsia
    #clang-analyzer-fuchsia.HandleChecker,
    # ObjectiveC only
    #clang-analyzer-nullability.*,
    clang-analyzer-optin.cplusplus.UninitializedObject,
    clang-analyzer-optin.cplusplus.VirtualCall,
    # We are not using the MPI library
    #clang-analyzer-optin.mpi.*,
    # We are not developing for osx
    #clang-analyzer-optin.osx.*,
    # We are not using GCD
    #clang-analyzer-optin.performance.GCDAntipattern,
    clang-analyzer-optin.performance.Padding,
    clang-analyzer-optin.portability.UnixAPI,
    # We are not using std::experimental::simd
    #clang-analyzer-optin.portability-simd-intrinsics,
    # We are not developing for osx
    #clang-analyzer-osx.*,
    clang-analyzer-security.FloatLoopCounter,
    clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling,
    clang-analyzer-security.insecureAPI.SecuritySyntaxChecker,
    clang-analyzer-security.insecureAPI.UncheckedReturn,
    clang-analyzer-security.insecureAPI.bcmp,
    clang-analyzer-security.insecureAPI.bcopy,
    clang-analyzer-security.insecureAPI.bzero,
    # We are not using ObjectiveC
    #clang-analyzer-security.insecureAPI.decodeValueOfObjCType,
    clang-analyzer-security.insecureAPI.getpw,
    clang-analyzer-security.insecureAPI.gets,
    clang-analyzer-security.insecureAPI.mkstemp,
    clang-analyzer-security.insecureAPI.mktemp,
    clang-analyzer-security.insecureAPI.rand,
    clang-analyzer-security.insecureAPI.strcpy,
    clang-analyzer-security.insecureAPI.vfork,
    clang-analyzer-unix.API,
    clang-analyzer-unix.DynamicMemoryModeling,
    clang-analyzer-unix.Malloc,
    clang-analyzer-unix.MallocSizeof,
    clang-analyzer-unix.MismatchedDeallocator,
    clang-analyzer-unix.Vfork,
    clang-analyzer-unix.cstring.BadSizeArg,
    clang-analyzer-unix.cstring.CStringModeling,
    clang-analyzer-unix.cstring.NullArg,
    clang-analyzer-valist.CopyToSelf,
    clang-analyzer-valist.Uninitialized,
    clang-analyzer-valist.Unterminated,
    clang-analyzer-valist.ValistBase,

    # Alias: modernize-avoid-c-arrays
    #cppcoreguidelines-avoid-c-arrays,
    cppcoreguidelines-avoid-goto,
    # Alias: readability-magic-numbers
    #cppcoreguidelines-avoid-magic-numbers,
    cppcoreguidelines-c-copy-assignment-signature,
    # Alias: modernize-use-override
    #cppcoreguidelines-explicit-virtual-functions,
    cppcoreguidelines-init-variables,
    cppcoreguidelines-interfaces-global-init,
    # This check does not work well with exporting API symbols
    #cppcoreguidelines-macro-usage,
    cppcoreguidelines-narrowing-conversions,
    cppcoreguidelines-no-malloc,
    # Alias: misc-non-private-member-variables-in-classes
    #cppcoreguidelines-non-private-member-variables-in-classes,
    # We are not using GSL
    #cppcoreguidelines-owning-memory,
    # Many false positives (for example in MGU NaRE::logInfo)
    #cppcoreguidelines-pro-bounds-array-to-pointer-decay,
    # Many false positives
    #cppcoreguidelines-pro-bounds-constant-array-index,
    cppcoreguidelines-pro-bounds-pointer-arithmetic,
    cppcoreguidelines-pro-type-const-cast,
    cppcoreguidelines-pro-type-cstyle-cast,
    cppcoreguidelines-pro-type-member-init,
    cppcoreguidelines-pro-type-reinterpret-cast,
    cppcoreguidelines-pro-type-static-cast-downcast,
    cppcoreguidelines-pro-type-union-access,
    cppcoreguidelines-pro-type-vararg,
    cppcoreguidelines-slicing,
    # TODO Violin check if we can workaround these issues with our clang-tidy wrapper
    # Google test templated tests TEST_P macros break this rule
    #cppcoreguidelines-special-member-functions,
    # Google test does not comply to this rule
    #cppcoreguidelines-avoid-non-const-global-variables,

    # We are not using Darwin
    #darwin-*,

    # We are not using Fuchsia
    #fuchsia-*,

    google-build-explicit-make-pair,
    # Alias: cert-dcl59-cpp
    #google-build-namespaces,
    # Coding style, projects can optionally enable this.
    #google-build-using-namespace,
    google-default-arguments,
    google-explicit-constructor,
    google-global-names-in-headers,
    # We are not using ObjectiveC
    #google-objc-*,
    # Coding style, projects can optionally enable this.
    #google-readability-avoid-underscore-in-googletest-name,
    # Alias: readability-braces-around-statements
    #google-readability-braces-around-statements,
    google-readability-casting,
    # Coding style, projects can optionally enable this.
    #google-readability-function-size,
    # Alias: llvm-namespace-comment
    #google-readability-namespace-comments,
    # Coding style, projects can optionally enable this.
    #google-readability-todo,
    google-runtime-int,
    google-runtime-operator,
    # Coding style, projects can optionally enable this.
    #google-runtime-references,
    # Coding style, projects can optionally enable this.
    google-upgrade-googletest-case,

    # Alias: modernize-avoid-c-arrays
    #hicpp-avoid-c-arrays,
    hicpp-avoid-goto,
    # Alias: readability-braces-around-statements
    #hicpp-braces-around-statements,
    # Alias: modernize-deprecated-headers
    #hicpp-deprecated-headers,
    # Coding style, projects can optionally enable this.
    #hicpp-exception-baseclass,
    # Alias: google-explicit-constructor
    #hicpp-explicit-conversions,
    # Alias: readability-function-size
    #hicpp-function-size,
    # Alias: bugprone-use-after-move
    #hicpp-invalid-access-moved,
    # Alias: cppcoreguidelines-pro-type-member-init
    #hicpp-member-init,
    hicpp-move-const-arg,
    hicpp-multiway-paths-covered,
    hicpp-named-parameter,
    # Alias: misc-new-delete-overloads
    #hicpp-new-delete-operators,
    # Alias: cppcoreguidelines-pro-bounds-array-to-pointer-decay
    #hicpp-no-array-decay,
    hicpp-no-assembler,
    hicpp-noexcept-move,
    # Alias: cppcoreguidelines-no-malloc
    #hicpp-no-malloc,
    hicpp-signed-bitwise,
    # Alias: cppcoreguidelines-special-member-functions
    #hicpp-special-member-functions,
    # Alias: misc-static-assert
    #hicpp-static-assert,
    # Alias: bugprone-undelegated-constructor
    #hicpp-undelegated-constructor,
    # Alias: readability-uppercase-literal-suffix
    #hicpp-uppercase-literal-suffix,
    # Alias: modernize-use-auto
    #hicpp-use-auto,
    # Alias: modernize-use-emplace
    #hicpp-use-emplace,
    # Alias: modernize-use-equals-default
    #hicpp-use-equals-default,
    # Alias: modernize-use-equals-delete
    #hicpp-use-equals-delete,
    # Alias: modernize-use-noexcept
    #hicpp-use-noexcept,
    # Alias: modernize-use-nullptr
    #hicpp-use-nullptr,
    # Alias: modernize-use-override
    #hicpp-use-override,
    # Alias: cppcoreguidelines-pro-type-vararg
    #hicpp-vararg,

    # We are not working on the Linux kernel
    #linuxkernel-*,

    # Not relevant for us, too llvm specific
    #llvm-header-guard,
    #llvm-include-order,
    #llvm-namespace-comment,
    #llvm-prefer-isa-or-dyn-cast-in-conditionals,

    # We are not using the LLVM::Register class
    #llvm-prefer-register-over-unsigned,
    # Alias: readability-qualified-auto
    #llvm-qualified-auto,
    # We are not using the LLVM::Twine class
    #llvm-twine-local,

    misc-definitions-in-headers,
    misc-misplaced-const,
    misc-new-delete-overloads,
    misc-non-copyable-objects,
    # Coding style, projects can optionally enable this.
    #misc-non-private-member-variables-in-classes,
    misc-redundant-expression,
    misc-static-assert,
    misc-throw-by-value-catch-by-reference,
    misc-unconventional-assign-operator,
    misc-uniqueptr-reset-release,
    misc-unused-alias-decls,
    misc-unused-parameters,
    misc-unused-using-decls,

    # Coding style, projects can optionally enable this.
    #modernize-avoid-bind,
    modernize-avoid-c-arrays,
    # MGU code that uses Qt MOC cannot use nested namespaces.
    #modernize-concat-nested-namespaces,
    modernize-deprecated-ios-base-aliases,
    modernize-deprecated-headers,
    modernize-loop-convert,
    modernize-make-shared,
    modernize-make-unique,
    modernize-pass-by-value,
    modernize-raw-string-literal,
    modernize-redundant-void-arg,
    modernize-replace-auto-ptr,
    modernize-replace-random-shuffle,
    modernize-return-braced-init-list,
    modernize-shrink-to-fit,
    modernize-unary-static-assert,
    modernize-use-auto,
    modernize-use-bool-literals,
    modernize-use-default-member-init,
    modernize-use-emplace,
    modernize-use-equals-default,
    modernize-use-equals-delete,
    modernize-use-nodiscard,
    modernize-use-noexcept,
    modernize-use-nullptr,
    modernize-use-override,
    # Coding style, projects can optionally enable this.
    #modernize-use-trailing-return-type,
    # Coding style, projects can optionally enable this.
    #modernize-use-transparent-functors,
    modernize-use-uncaught-exceptions,
    modernize-use-using,

    # We are not using MPI
    #mpi-*,

    # We are not using ObjectiveC
    #objc-*,

    # We are not using OpenMP
    #openmp-*,

    performance-faster-string-find,
    performance-for-range-copy,
    performance-implicit-conversion-in-loop,
    performance-inefficient-algorithm,
    performance-inefficient-string-concatenation,
    performance-inefficient-vector-operation,
    performance-move-const-arg,
    performance-move-constructor-init,
    performance-no-automatic-move,
    performance-noexcept-move-constructor,
    performance-trivially-destructible,
    performance-type-promotion-in-math-fn,
    performance-unnecessary-copy-initialization,
    performance-unnecessary-value-param,

    # We are not using std::experimental::simd
    #portability-simd-*,

    # Coding style, projects can optionally enable this.
    #readability-avoid-const-params-in-decls,
    readability-braces-around-statements,
    readability-const-return-type,
    readability-container-size-empty,
    readability-convert-member-functions-to-static,
    readability-delete-null-pointer,
    readability-deleted-default,
    readability-else-after-return,
    # Coding style, projects can optionally enable this.
    #readability-function-size,
    # Coding style, projects can optionally enable this.
    #readability-identifier-naming,
    readability-implicit-bool-conversion,
    readability-inconsistent-declaration-parameter-name,
    readability-isolate-declaration,
    # Coding style, projects can optionally enable this.
    #readability-magic-numbers,
    # Disabled because not working properly with public pimpl members
    #readability-make-member-function-const,
    readability-misleading-indentation,
    readability-misplaced-array-index,
    readability-named-parameter,
    readability-non-const-parameter,
    # Coding style, projects can optionally enable this.
    #readability-qualified-auto,
    # Coding style, projects can optionally enable this.
    #readability-redundant-access-specifiers,
    readability-redundant-control-flow,
    readability-redundant-declaration,
    readability-redundant-function-ptr-dereference,
    readability-redundant-member-init,
    readability-redundant-preprocessor,
    readability-redundant-smartptr-get,
    readability-redundant-string-cstr,
    readability-redundant-string-init,
    # Coding style, projects can optionally enable this.
    #readability-simplify-boolean-expr,
    readability-simplify-subscript-expr,
    readability-static-accessed-through-instance,
    readability-static-definition-in-anonymous-namespace,
    readability-string-compare,
    readability-uniqueptr-delete-release,
    # Coding style, projects can optionally enable this.
    #readability-uppercase-literal-suffix

    # We are not using the Zircon kernel
    #zircon-temporary-objects
'

# everything that is enabled is also an error
WarningsAsErrors: '*'

HeaderFilterRegex: '.*'

AnalyzeTemporaryDtors: false
FormatStyle:     File

CheckOptions:
    # https://releases.llvm.org/9.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone-assert-side-effect.html#cmdoption-arg-assertmacros
      - key: bugprone-assert-side-effect.AssertMacros
        value: 'Q_ASSERT,Q_ASSERT_X,Q_CHECK_PTR'
    # https://releases.llvm.org/9.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone-assert-side-effect.html#cmdoption-arg-checkfunctioncalls
      - key: bugprone-assert-side-effect.CheckFunctionCalls
        value: '1'
    # https://releases.llvm.org/9.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone-sizeof-expression.html#cmdoption-arg-warnonsizeofintegerexpression
      - key: bugprone-sizeof-expression.WarnOnSizeOfIntegerExpression
        value: '1'
    # https://releases.llvm.org/9.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/bugprone-suspicious-string-compare.html#cmdoption-arg-warnonlogicalnotcomparison
      - key: bugprone-suspicious-string-compare.WarnOnLogicalNotComparison
        value: '1'
    # https://releases.llvm.org/9.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/misc-throw-by-value-catch-by-reference.html#cmdoption-arg-warnonlargeobject
      - key: misc-throw-by-value-catch-by-reference.WarnOnLargeObject
        value: '1'
    # https://releases.llvm.org/9.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines-narrowing-conversions.html#cmdoption-arg-pedanticmode
      - key: cppcoreguidelines-narrowing-conversions.PedanticMode
        value: '1'
    # https://releases.llvm.org/9.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines-special-member-functions.html#cmdoption-arg-allowsoledefaultdtor
      - key: cppcoreguidelines-special-member-functions.AllowMissingMoveFunctions
        value: '1'
    # https://releases.llvm.org/9.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/cppcoreguidelines-special-member-functions.html#cmdoption-arg-allowsoledefaultdtor
      - key: cppcoreguidelines-special-member-functions.AllowSoleDefaultDtor
        value: '1'
    # https://releases.llvm.org/9.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/hicpp-multiway-paths-covered.html#cmdoption-arg-warnonmissingelse
      - key: hicpp-multiway-paths-covered.WarnOnMissingElse
        value: '0'
    # https://releases.llvm.org/9.0.0/tools/clang/tools/extra/docs/clang-tidy/checks/readability-implicit-bool-conversion.html#cmdoption-arg-allowpointerconditions
      - key: readability-implicit-bool-conversion.AllowPointerConditions
        value: '1'
    # https://clang.llvm.org/extra/clang-tidy/checks/readability-braces-around-statements.html
      - key: readability-braces-around-statements.ShortStatementLines
        value: '2'
...
