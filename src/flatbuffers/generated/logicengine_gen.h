// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOGICENGINE_RLOGIC_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_LOGICENGINE_RLOGIC_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

#include "logicnode_gen.h"
#include "luascript_gen.h"
#include "property_gen.h"
#include "ramsesnodebinding_gen.h"

namespace rlogic {
namespace serialization {

struct LogicEngine;
struct LogicEngineBuilder;

struct LogicEngine FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LogicEngineBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LUASCRIPTS = 4,
    VT_RAMSESNODEBINDINGS = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<rlogic::serialization::LuaScript>> *luascripts() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<rlogic::serialization::LuaScript>> *>(VT_LUASCRIPTS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<rlogic::serialization::RamsesNodeBinding>> *ramsesnodebindings() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<rlogic::serialization::RamsesNodeBinding>> *>(VT_RAMSESNODEBINDINGS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LUASCRIPTS) &&
           verifier.VerifyVector(luascripts()) &&
           verifier.VerifyVectorOfTables(luascripts()) &&
           VerifyOffset(verifier, VT_RAMSESNODEBINDINGS) &&
           verifier.VerifyVector(ramsesnodebindings()) &&
           verifier.VerifyVectorOfTables(ramsesnodebindings()) &&
           verifier.EndTable();
  }
};

struct LogicEngineBuilder {
  typedef LogicEngine Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_luascripts(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<rlogic::serialization::LuaScript>>> luascripts) {
    fbb_.AddOffset(LogicEngine::VT_LUASCRIPTS, luascripts);
  }
  void add_ramsesnodebindings(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<rlogic::serialization::RamsesNodeBinding>>> ramsesnodebindings) {
    fbb_.AddOffset(LogicEngine::VT_RAMSESNODEBINDINGS, ramsesnodebindings);
  }
  explicit LogicEngineBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LogicEngineBuilder &operator=(const LogicEngineBuilder &);
  flatbuffers::Offset<LogicEngine> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LogicEngine>(end);
    return o;
  }
};

inline flatbuffers::Offset<LogicEngine> CreateLogicEngine(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<rlogic::serialization::LuaScript>>> luascripts = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<rlogic::serialization::RamsesNodeBinding>>> ramsesnodebindings = 0) {
  LogicEngineBuilder builder_(_fbb);
  builder_.add_ramsesnodebindings(ramsesnodebindings);
  builder_.add_luascripts(luascripts);
  return builder_.Finish();
}

struct LogicEngine::Traits {
  using type = LogicEngine;
  static auto constexpr Create = CreateLogicEngine;
};

inline flatbuffers::Offset<LogicEngine> CreateLogicEngineDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<rlogic::serialization::LuaScript>> *luascripts = nullptr,
    const std::vector<flatbuffers::Offset<rlogic::serialization::RamsesNodeBinding>> *ramsesnodebindings = nullptr) {
  auto luascripts__ = luascripts ? _fbb.CreateVector<flatbuffers::Offset<rlogic::serialization::LuaScript>>(*luascripts) : 0;
  auto ramsesnodebindings__ = ramsesnodebindings ? _fbb.CreateVector<flatbuffers::Offset<rlogic::serialization::RamsesNodeBinding>>(*ramsesnodebindings) : 0;
  return rlogic::serialization::CreateLogicEngine(
      _fbb,
      luascripts__,
      ramsesnodebindings__);
}

inline const rlogic::serialization::LogicEngine *GetLogicEngine(const void *buf) {
  return flatbuffers::GetRoot<rlogic::serialization::LogicEngine>(buf);
}

inline const rlogic::serialization::LogicEngine *GetSizePrefixedLogicEngine(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<rlogic::serialization::LogicEngine>(buf);
}

inline bool VerifyLogicEngineBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<rlogic::serialization::LogicEngine>(nullptr);
}

inline bool VerifySizePrefixedLogicEngineBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<rlogic::serialization::LogicEngine>(nullptr);
}

inline void FinishLogicEngineBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<rlogic::serialization::LogicEngine> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLogicEngineBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<rlogic::serialization::LogicEngine> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace serialization
}  // namespace rlogic

#endif  // FLATBUFFERS_GENERATED_LOGICENGINE_RLOGIC_SERIALIZATION_H_
