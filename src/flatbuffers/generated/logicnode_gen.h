// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOGICNODE_RLOGIC_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_LOGICNODE_RLOGIC_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

#include "property_gen.h"

namespace rlogic {
namespace serialization {

struct LogicNode;
struct LogicNodeBuilder;

struct LogicNode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LogicNodeBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_INPUTS = 6,
    VT_OUTPUTS = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const rlogic::serialization::Property *inputs() const {
    return GetPointer<const rlogic::serialization::Property *>(VT_INPUTS);
  }
  const rlogic::serialization::Property *outputs() const {
    return GetPointer<const rlogic::serialization::Property *>(VT_OUTPUTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_INPUTS) &&
           verifier.VerifyTable(inputs()) &&
           VerifyOffset(verifier, VT_OUTPUTS) &&
           verifier.VerifyTable(outputs()) &&
           verifier.EndTable();
  }
};

struct LogicNodeBuilder {
  typedef LogicNode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(LogicNode::VT_NAME, name);
  }
  void add_inputs(flatbuffers::Offset<rlogic::serialization::Property> inputs) {
    fbb_.AddOffset(LogicNode::VT_INPUTS, inputs);
  }
  void add_outputs(flatbuffers::Offset<rlogic::serialization::Property> outputs) {
    fbb_.AddOffset(LogicNode::VT_OUTPUTS, outputs);
  }
  explicit LogicNodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LogicNodeBuilder &operator=(const LogicNodeBuilder &);
  flatbuffers::Offset<LogicNode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LogicNode>(end);
    return o;
  }
};

inline flatbuffers::Offset<LogicNode> CreateLogicNode(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<rlogic::serialization::Property> inputs = 0,
    flatbuffers::Offset<rlogic::serialization::Property> outputs = 0) {
  LogicNodeBuilder builder_(_fbb);
  builder_.add_outputs(outputs);
  builder_.add_inputs(inputs);
  builder_.add_name(name);
  return builder_.Finish();
}

struct LogicNode::Traits {
  using type = LogicNode;
  static auto constexpr Create = CreateLogicNode;
};

inline flatbuffers::Offset<LogicNode> CreateLogicNodeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    flatbuffers::Offset<rlogic::serialization::Property> inputs = 0,
    flatbuffers::Offset<rlogic::serialization::Property> outputs = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return rlogic::serialization::CreateLogicNode(
      _fbb,
      name__,
      inputs,
      outputs);
}

inline const rlogic::serialization::LogicNode *GetLogicNode(const void *buf) {
  return flatbuffers::GetRoot<rlogic::serialization::LogicNode>(buf);
}

inline const rlogic::serialization::LogicNode *GetSizePrefixedLogicNode(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<rlogic::serialization::LogicNode>(buf);
}

inline bool VerifyLogicNodeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<rlogic::serialization::LogicNode>(nullptr);
}

inline bool VerifySizePrefixedLogicNodeBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<rlogic::serialization::LogicNode>(nullptr);
}

inline void FinishLogicNodeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<rlogic::serialization::LogicNode> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLogicNodeBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<rlogic::serialization::LogicNode> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace serialization
}  // namespace rlogic

#endif  // FLATBUFFERS_GENERATED_LOGICNODE_RLOGIC_SERIALIZATION_H_
