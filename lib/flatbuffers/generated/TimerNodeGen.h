// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TIMERNODE_RLOGIC_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_TIMERNODE_RLOGIC_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

#include "LogicObjectGen.h"
#include "PropertyGen.h"

namespace rlogic_serialization {

struct TimerNode;
struct TimerNodeBuilder;

inline const flatbuffers::TypeTable *TimerNodeTypeTable();

struct TimerNode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TimerNodeBuilder Builder;
  struct Traits;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return TimerNodeTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE = 4,
    VT_ROOTINPUT = 6,
    VT_ROOTOUTPUT = 8
  };
  const rlogic_serialization::LogicObject *base() const {
    return GetPointer<const rlogic_serialization::LogicObject *>(VT_BASE);
  }
  const rlogic_serialization::Property *rootInput() const {
    return GetPointer<const rlogic_serialization::Property *>(VT_ROOTINPUT);
  }
  const rlogic_serialization::Property *rootOutput() const {
    return GetPointer<const rlogic_serialization::Property *>(VT_ROOTOUTPUT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BASE) &&
           verifier.VerifyTable(base()) &&
           VerifyOffset(verifier, VT_ROOTINPUT) &&
           verifier.VerifyTable(rootInput()) &&
           VerifyOffset(verifier, VT_ROOTOUTPUT) &&
           verifier.VerifyTable(rootOutput()) &&
           verifier.EndTable();
  }
};

struct TimerNodeBuilder {
  typedef TimerNode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_base(flatbuffers::Offset<rlogic_serialization::LogicObject> base) {
    fbb_.AddOffset(TimerNode::VT_BASE, base);
  }
  void add_rootInput(flatbuffers::Offset<rlogic_serialization::Property> rootInput) {
    fbb_.AddOffset(TimerNode::VT_ROOTINPUT, rootInput);
  }
  void add_rootOutput(flatbuffers::Offset<rlogic_serialization::Property> rootOutput) {
    fbb_.AddOffset(TimerNode::VT_ROOTOUTPUT, rootOutput);
  }
  explicit TimerNodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TimerNodeBuilder &operator=(const TimerNodeBuilder &);
  flatbuffers::Offset<TimerNode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TimerNode>(end);
    return o;
  }
};

inline flatbuffers::Offset<TimerNode> CreateTimerNode(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<rlogic_serialization::LogicObject> base = 0,
    flatbuffers::Offset<rlogic_serialization::Property> rootInput = 0,
    flatbuffers::Offset<rlogic_serialization::Property> rootOutput = 0) {
  TimerNodeBuilder builder_(_fbb);
  builder_.add_rootOutput(rootOutput);
  builder_.add_rootInput(rootInput);
  builder_.add_base(base);
  return builder_.Finish();
}

struct TimerNode::Traits {
  using type = TimerNode;
  static auto constexpr Create = CreateTimerNode;
};

inline const flatbuffers::TypeTable *TimerNodeTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 1 },
    { flatbuffers::ET_SEQUENCE, 0, 1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    rlogic_serialization::LogicObjectTypeTable,
    rlogic_serialization::PropertyTypeTable
  };
  static const char * const names[] = {
    "base",
    "rootInput",
    "rootOutput"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

}  // namespace rlogic_serialization

#endif  // FLATBUFFERS_GENERATED_TIMERNODE_RLOGIC_SERIALIZATION_H_
