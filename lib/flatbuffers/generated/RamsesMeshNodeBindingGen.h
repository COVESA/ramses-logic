// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RAMSESMESHNODEBINDING_RLOGIC_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_RAMSESMESHNODEBINDING_RLOGIC_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

#include "LogicObjectGen.h"
#include "PropertyGen.h"
#include "RamsesBindingGen.h"
#include "RamsesReferenceGen.h"

namespace rlogic_serialization {

struct RamsesMeshNodeBinding;
struct RamsesMeshNodeBindingBuilder;

inline const flatbuffers::TypeTable *RamsesMeshNodeBindingTypeTable();

struct RamsesMeshNodeBinding FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RamsesMeshNodeBindingBuilder Builder;
  struct Traits;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return RamsesMeshNodeBindingTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE = 4
  };
  const rlogic_serialization::RamsesBinding *base() const {
    return GetPointer<const rlogic_serialization::RamsesBinding *>(VT_BASE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BASE) &&
           verifier.VerifyTable(base()) &&
           verifier.EndTable();
  }
};

struct RamsesMeshNodeBindingBuilder {
  typedef RamsesMeshNodeBinding Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_base(flatbuffers::Offset<rlogic_serialization::RamsesBinding> base) {
    fbb_.AddOffset(RamsesMeshNodeBinding::VT_BASE, base);
  }
  explicit RamsesMeshNodeBindingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RamsesMeshNodeBindingBuilder &operator=(const RamsesMeshNodeBindingBuilder &);
  flatbuffers::Offset<RamsesMeshNodeBinding> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RamsesMeshNodeBinding>(end);
    return o;
  }
};

inline flatbuffers::Offset<RamsesMeshNodeBinding> CreateRamsesMeshNodeBinding(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<rlogic_serialization::RamsesBinding> base = 0) {
  RamsesMeshNodeBindingBuilder builder_(_fbb);
  builder_.add_base(base);
  return builder_.Finish();
}

struct RamsesMeshNodeBinding::Traits {
  using type = RamsesMeshNodeBinding;
  static auto constexpr Create = CreateRamsesMeshNodeBinding;
};

inline const flatbuffers::TypeTable *RamsesMeshNodeBindingTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 0, 0 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    rlogic_serialization::RamsesBindingTypeTable
  };
  static const char * const names[] = {
    "base"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

}  // namespace rlogic_serialization

#endif  // FLATBUFFERS_GENERATED_RAMSESMESHNODEBINDING_RLOGIC_SERIALIZATION_H_
