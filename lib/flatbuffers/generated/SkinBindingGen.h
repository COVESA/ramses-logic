// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SKINBINDING_RLOGIC_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_SKINBINDING_RLOGIC_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

#include "LogicObjectGen.h"
#include "PropertyGen.h"
#include "RamsesBindingGen.h"
#include "RamsesReferenceGen.h"

namespace rlogic_serialization {

struct SkinBinding;
struct SkinBindingBuilder;

inline const flatbuffers::TypeTable *SkinBindingTypeTable();

struct SkinBinding FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SkinBindingBuilder Builder;
  struct Traits;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return SkinBindingTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE = 4,
    VT_JOINTNODEBINDINGIDS = 6,
    VT_INVERSEBINDINGMATRICESDATA = 8,
    VT_APPEARANCEBINDINGID = 10,
    VT_JOINTMATUNIFORMINPUTNAME = 12
  };
  const rlogic_serialization::LogicObject *base() const {
    return GetPointer<const rlogic_serialization::LogicObject *>(VT_BASE);
  }
  const flatbuffers::Vector<uint64_t> *jointNodeBindingIds() const {
    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_JOINTNODEBINDINGIDS);
  }
  const flatbuffers::Vector<float> *inverseBindingMatricesData() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_INVERSEBINDINGMATRICESDATA);
  }
  uint64_t appearanceBindingId() const {
    return GetField<uint64_t>(VT_APPEARANCEBINDINGID, 0);
  }
  const flatbuffers::String *jointMatUniformInputName() const {
    return GetPointer<const flatbuffers::String *>(VT_JOINTMATUNIFORMINPUTNAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BASE) &&
           verifier.VerifyTable(base()) &&
           VerifyOffset(verifier, VT_JOINTNODEBINDINGIDS) &&
           verifier.VerifyVector(jointNodeBindingIds()) &&
           VerifyOffset(verifier, VT_INVERSEBINDINGMATRICESDATA) &&
           verifier.VerifyVector(inverseBindingMatricesData()) &&
           VerifyField<uint64_t>(verifier, VT_APPEARANCEBINDINGID) &&
           VerifyOffset(verifier, VT_JOINTMATUNIFORMINPUTNAME) &&
           verifier.VerifyString(jointMatUniformInputName()) &&
           verifier.EndTable();
  }
};

struct SkinBindingBuilder {
  typedef SkinBinding Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_base(flatbuffers::Offset<rlogic_serialization::LogicObject> base) {
    fbb_.AddOffset(SkinBinding::VT_BASE, base);
  }
  void add_jointNodeBindingIds(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> jointNodeBindingIds) {
    fbb_.AddOffset(SkinBinding::VT_JOINTNODEBINDINGIDS, jointNodeBindingIds);
  }
  void add_inverseBindingMatricesData(flatbuffers::Offset<flatbuffers::Vector<float>> inverseBindingMatricesData) {
    fbb_.AddOffset(SkinBinding::VT_INVERSEBINDINGMATRICESDATA, inverseBindingMatricesData);
  }
  void add_appearanceBindingId(uint64_t appearanceBindingId) {
    fbb_.AddElement<uint64_t>(SkinBinding::VT_APPEARANCEBINDINGID, appearanceBindingId, 0);
  }
  void add_jointMatUniformInputName(flatbuffers::Offset<flatbuffers::String> jointMatUniformInputName) {
    fbb_.AddOffset(SkinBinding::VT_JOINTMATUNIFORMINPUTNAME, jointMatUniformInputName);
  }
  explicit SkinBindingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SkinBindingBuilder &operator=(const SkinBindingBuilder &);
  flatbuffers::Offset<SkinBinding> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SkinBinding>(end);
    return o;
  }
};

inline flatbuffers::Offset<SkinBinding> CreateSkinBinding(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<rlogic_serialization::LogicObject> base = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> jointNodeBindingIds = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> inverseBindingMatricesData = 0,
    uint64_t appearanceBindingId = 0,
    flatbuffers::Offset<flatbuffers::String> jointMatUniformInputName = 0) {
  SkinBindingBuilder builder_(_fbb);
  builder_.add_appearanceBindingId(appearanceBindingId);
  builder_.add_jointMatUniformInputName(jointMatUniformInputName);
  builder_.add_inverseBindingMatricesData(inverseBindingMatricesData);
  builder_.add_jointNodeBindingIds(jointNodeBindingIds);
  builder_.add_base(base);
  return builder_.Finish();
}

struct SkinBinding::Traits {
  using type = SkinBinding;
  static auto constexpr Create = CreateSkinBinding;
};

inline flatbuffers::Offset<SkinBinding> CreateSkinBindingDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<rlogic_serialization::LogicObject> base = 0,
    const std::vector<uint64_t> *jointNodeBindingIds = nullptr,
    const std::vector<float> *inverseBindingMatricesData = nullptr,
    uint64_t appearanceBindingId = 0,
    const char *jointMatUniformInputName = nullptr) {
  auto jointNodeBindingIds__ = jointNodeBindingIds ? _fbb.CreateVector<uint64_t>(*jointNodeBindingIds) : 0;
  auto inverseBindingMatricesData__ = inverseBindingMatricesData ? _fbb.CreateVector<float>(*inverseBindingMatricesData) : 0;
  auto jointMatUniformInputName__ = jointMatUniformInputName ? _fbb.CreateString(jointMatUniformInputName) : 0;
  return rlogic_serialization::CreateSkinBinding(
      _fbb,
      base,
      jointNodeBindingIds__,
      inverseBindingMatricesData__,
      appearanceBindingId,
      jointMatUniformInputName__);
}

inline const flatbuffers::TypeTable *SkinBindingTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_ULONG, 1, -1 },
    { flatbuffers::ET_FLOAT, 1, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    rlogic_serialization::LogicObjectTypeTable
  };
  static const char * const names[] = {
    "base",
    "jointNodeBindingIds",
    "inverseBindingMatricesData",
    "appearanceBindingId",
    "jointMatUniformInputName"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 5, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

}  // namespace rlogic_serialization

#endif  // FLATBUFFERS_GENERATED_SKINBINDING_RLOGIC_SERIALIZATION_H_
