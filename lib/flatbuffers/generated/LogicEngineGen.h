// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOGICENGINE_RLOGIC_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_LOGICENGINE_RLOGIC_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

#include "AnimationNodeGen.h"
#include "ApiObjectsGen.h"
#include "DataArrayGen.h"
#include "LinkGen.h"
#include "LogicObjectGen.h"
#include "LuaInterfaceGen.h"
#include "LuaModuleGen.h"
#include "LuaScriptGen.h"
#include "PropertyGen.h"
#include "RamsesAppearanceBindingGen.h"
#include "RamsesBindingGen.h"
#include "RamsesCameraBindingGen.h"
#include "RamsesNodeBindingGen.h"
#include "RamsesReferenceGen.h"
#include "TimerNodeGen.h"

namespace rlogic_serialization {

struct Version;
struct VersionBuilder;

struct Metadata;
struct MetadataBuilder;

struct LogicEngine;
struct LogicEngineBuilder;

inline const flatbuffers::TypeTable *VersionTypeTable();

inline const flatbuffers::TypeTable *MetadataTypeTable();

inline const flatbuffers::TypeTable *LogicEngineTypeTable();

struct Version FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef VersionBuilder Builder;
  struct Traits;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return VersionTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_V_MAJOR = 4,
    VT_V_MINOR = 6,
    VT_V_PATCH = 8,
    VT_V_STRING = 10
  };
  uint32_t v_major() const {
    return GetField<uint32_t>(VT_V_MAJOR, 0);
  }
  uint32_t v_minor() const {
    return GetField<uint32_t>(VT_V_MINOR, 0);
  }
  uint32_t v_patch() const {
    return GetField<uint32_t>(VT_V_PATCH, 0);
  }
  const flatbuffers::String *v_string() const {
    return GetPointer<const flatbuffers::String *>(VT_V_STRING);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_V_MAJOR) &&
           VerifyField<uint32_t>(verifier, VT_V_MINOR) &&
           VerifyField<uint32_t>(verifier, VT_V_PATCH) &&
           VerifyOffset(verifier, VT_V_STRING) &&
           verifier.VerifyString(v_string()) &&
           verifier.EndTable();
  }
};

struct VersionBuilder {
  typedef Version Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_v_major(uint32_t v_major) {
    fbb_.AddElement<uint32_t>(Version::VT_V_MAJOR, v_major, 0);
  }
  void add_v_minor(uint32_t v_minor) {
    fbb_.AddElement<uint32_t>(Version::VT_V_MINOR, v_minor, 0);
  }
  void add_v_patch(uint32_t v_patch) {
    fbb_.AddElement<uint32_t>(Version::VT_V_PATCH, v_patch, 0);
  }
  void add_v_string(flatbuffers::Offset<flatbuffers::String> v_string) {
    fbb_.AddOffset(Version::VT_V_STRING, v_string);
  }
  explicit VersionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  VersionBuilder &operator=(const VersionBuilder &);
  flatbuffers::Offset<Version> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Version>(end);
    return o;
  }
};

inline flatbuffers::Offset<Version> CreateVersion(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t v_major = 0,
    uint32_t v_minor = 0,
    uint32_t v_patch = 0,
    flatbuffers::Offset<flatbuffers::String> v_string = 0) {
  VersionBuilder builder_(_fbb);
  builder_.add_v_string(v_string);
  builder_.add_v_patch(v_patch);
  builder_.add_v_minor(v_minor);
  builder_.add_v_major(v_major);
  return builder_.Finish();
}

struct Version::Traits {
  using type = Version;
  static auto constexpr Create = CreateVersion;
};

inline flatbuffers::Offset<Version> CreateVersionDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t v_major = 0,
    uint32_t v_minor = 0,
    uint32_t v_patch = 0,
    const char *v_string = nullptr) {
  auto v_string__ = v_string ? _fbb.CreateString(v_string) : 0;
  return rlogic_serialization::CreateVersion(
      _fbb,
      v_major,
      v_minor,
      v_patch,
      v_string__);
}

struct Metadata FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MetadataBuilder Builder;
  struct Traits;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return MetadataTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_METADATASTRING = 4,
    VT_EXPORTERVERSION = 6,
    VT_EXPORTERFILEVERSION = 8
  };
  const flatbuffers::String *metadataString() const {
    return GetPointer<const flatbuffers::String *>(VT_METADATASTRING);
  }
  const rlogic_serialization::Version *exporterVersion() const {
    return GetPointer<const rlogic_serialization::Version *>(VT_EXPORTERVERSION);
  }
  uint32_t exporterFileVersion() const {
    return GetField<uint32_t>(VT_EXPORTERFILEVERSION, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_METADATASTRING) &&
           verifier.VerifyString(metadataString()) &&
           VerifyOffset(verifier, VT_EXPORTERVERSION) &&
           verifier.VerifyTable(exporterVersion()) &&
           VerifyField<uint32_t>(verifier, VT_EXPORTERFILEVERSION) &&
           verifier.EndTable();
  }
};

struct MetadataBuilder {
  typedef Metadata Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_metadataString(flatbuffers::Offset<flatbuffers::String> metadataString) {
    fbb_.AddOffset(Metadata::VT_METADATASTRING, metadataString);
  }
  void add_exporterVersion(flatbuffers::Offset<rlogic_serialization::Version> exporterVersion) {
    fbb_.AddOffset(Metadata::VT_EXPORTERVERSION, exporterVersion);
  }
  void add_exporterFileVersion(uint32_t exporterFileVersion) {
    fbb_.AddElement<uint32_t>(Metadata::VT_EXPORTERFILEVERSION, exporterFileVersion, 0);
  }
  explicit MetadataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MetadataBuilder &operator=(const MetadataBuilder &);
  flatbuffers::Offset<Metadata> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Metadata>(end);
    return o;
  }
};

inline flatbuffers::Offset<Metadata> CreateMetadata(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> metadataString = 0,
    flatbuffers::Offset<rlogic_serialization::Version> exporterVersion = 0,
    uint32_t exporterFileVersion = 0) {
  MetadataBuilder builder_(_fbb);
  builder_.add_exporterFileVersion(exporterFileVersion);
  builder_.add_exporterVersion(exporterVersion);
  builder_.add_metadataString(metadataString);
  return builder_.Finish();
}

struct Metadata::Traits {
  using type = Metadata;
  static auto constexpr Create = CreateMetadata;
};

inline flatbuffers::Offset<Metadata> CreateMetadataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *metadataString = nullptr,
    flatbuffers::Offset<rlogic_serialization::Version> exporterVersion = 0,
    uint32_t exporterFileVersion = 0) {
  auto metadataString__ = metadataString ? _fbb.CreateString(metadataString) : 0;
  return rlogic_serialization::CreateMetadata(
      _fbb,
      metadataString__,
      exporterVersion,
      exporterFileVersion);
}

struct LogicEngine FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LogicEngineBuilder Builder;
  struct Traits;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return LogicEngineTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RAMSESVERSION = 4,
    VT_RLOGICVERSION = 6,
    VT_APIOBJECTS = 8,
    VT_ASSETMETADATA = 10
  };
  const rlogic_serialization::Version *ramsesVersion() const {
    return GetPointer<const rlogic_serialization::Version *>(VT_RAMSESVERSION);
  }
  const rlogic_serialization::Version *rlogicVersion() const {
    return GetPointer<const rlogic_serialization::Version *>(VT_RLOGICVERSION);
  }
  const rlogic_serialization::ApiObjects *apiObjects() const {
    return GetPointer<const rlogic_serialization::ApiObjects *>(VT_APIOBJECTS);
  }
  const rlogic_serialization::Metadata *assetMetadata() const {
    return GetPointer<const rlogic_serialization::Metadata *>(VT_ASSETMETADATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_RAMSESVERSION) &&
           verifier.VerifyTable(ramsesVersion()) &&
           VerifyOffsetRequired(verifier, VT_RLOGICVERSION) &&
           verifier.VerifyTable(rlogicVersion()) &&
           VerifyOffset(verifier, VT_APIOBJECTS) &&
           verifier.VerifyTable(apiObjects()) &&
           VerifyOffset(verifier, VT_ASSETMETADATA) &&
           verifier.VerifyTable(assetMetadata()) &&
           verifier.EndTable();
  }
};

struct LogicEngineBuilder {
  typedef LogicEngine Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ramsesVersion(flatbuffers::Offset<rlogic_serialization::Version> ramsesVersion) {
    fbb_.AddOffset(LogicEngine::VT_RAMSESVERSION, ramsesVersion);
  }
  void add_rlogicVersion(flatbuffers::Offset<rlogic_serialization::Version> rlogicVersion) {
    fbb_.AddOffset(LogicEngine::VT_RLOGICVERSION, rlogicVersion);
  }
  void add_apiObjects(flatbuffers::Offset<rlogic_serialization::ApiObjects> apiObjects) {
    fbb_.AddOffset(LogicEngine::VT_APIOBJECTS, apiObjects);
  }
  void add_assetMetadata(flatbuffers::Offset<rlogic_serialization::Metadata> assetMetadata) {
    fbb_.AddOffset(LogicEngine::VT_ASSETMETADATA, assetMetadata);
  }
  explicit LogicEngineBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LogicEngineBuilder &operator=(const LogicEngineBuilder &);
  flatbuffers::Offset<LogicEngine> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LogicEngine>(end);
    fbb_.Required(o, LogicEngine::VT_RAMSESVERSION);
    fbb_.Required(o, LogicEngine::VT_RLOGICVERSION);
    return o;
  }
};

inline flatbuffers::Offset<LogicEngine> CreateLogicEngine(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<rlogic_serialization::Version> ramsesVersion = 0,
    flatbuffers::Offset<rlogic_serialization::Version> rlogicVersion = 0,
    flatbuffers::Offset<rlogic_serialization::ApiObjects> apiObjects = 0,
    flatbuffers::Offset<rlogic_serialization::Metadata> assetMetadata = 0) {
  LogicEngineBuilder builder_(_fbb);
  builder_.add_assetMetadata(assetMetadata);
  builder_.add_apiObjects(apiObjects);
  builder_.add_rlogicVersion(rlogicVersion);
  builder_.add_ramsesVersion(ramsesVersion);
  return builder_.Finish();
}

struct LogicEngine::Traits {
  using type = LogicEngine;
  static auto constexpr Create = CreateLogicEngine;
};

inline const flatbuffers::TypeTable *VersionTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "v_major",
    "v_minor",
    "v_patch",
    "v_string"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 4, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *MetadataTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_UINT, 0, -1 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    rlogic_serialization::VersionTypeTable
  };
  static const char * const names[] = {
    "metadataString",
    "exporterVersion",
    "exporterFileVersion"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *LogicEngineTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 1 },
    { flatbuffers::ET_SEQUENCE, 0, 2 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    rlogic_serialization::VersionTypeTable,
    rlogic_serialization::ApiObjectsTypeTable,
    rlogic_serialization::MetadataTypeTable
  };
  static const char * const names[] = {
    "ramsesVersion",
    "rlogicVersion",
    "apiObjects",
    "assetMetadata"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 4, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline const rlogic_serialization::LogicEngine *GetLogicEngine(const void *buf) {
  return flatbuffers::GetRoot<rlogic_serialization::LogicEngine>(buf);
}

inline const rlogic_serialization::LogicEngine *GetSizePrefixedLogicEngine(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<rlogic_serialization::LogicEngine>(buf);
}

inline const char *LogicEngineIdentifier() {
  return "rl01";
}

inline bool LogicEngineBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, LogicEngineIdentifier());
}

inline bool VerifyLogicEngineBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<rlogic_serialization::LogicEngine>(LogicEngineIdentifier());
}

inline bool VerifySizePrefixedLogicEngineBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<rlogic_serialization::LogicEngine>(LogicEngineIdentifier());
}

inline void FinishLogicEngineBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<rlogic_serialization::LogicEngine> root) {
  fbb.Finish(root, LogicEngineIdentifier());
}

inline void FinishSizePrefixedLogicEngineBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<rlogic_serialization::LogicEngine> root) {
  fbb.FinishSizePrefixed(root, LogicEngineIdentifier());
}

}  // namespace rlogic_serialization

#endif  // FLATBUFFERS_GENERATED_LOGICENGINE_RLOGIC_SERIALIZATION_H_
