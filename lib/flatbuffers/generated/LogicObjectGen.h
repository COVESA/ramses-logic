// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOGICOBJECT_RLOGIC_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_LOGICOBJECT_RLOGIC_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

namespace rlogic_serialization {

struct LogicObject;
struct LogicObjectBuilder;

inline const flatbuffers::TypeTable *LogicObjectTypeTable();

struct LogicObject FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LogicObjectBuilder Builder;
  struct Traits;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return LogicObjectTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ID = 6,
    VT_USERIDHIGH = 8,
    VT_USERIDLOW = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  uint64_t userIdHigh() const {
    return GetField<uint64_t>(VT_USERIDHIGH, 0);
  }
  uint64_t userIdLow() const {
    return GetField<uint64_t>(VT_USERIDLOW, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint64_t>(verifier, VT_ID) &&
           VerifyField<uint64_t>(verifier, VT_USERIDHIGH) &&
           VerifyField<uint64_t>(verifier, VT_USERIDLOW) &&
           verifier.EndTable();
  }
};

struct LogicObjectBuilder {
  typedef LogicObject Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(LogicObject::VT_NAME, name);
  }
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(LogicObject::VT_ID, id, 0);
  }
  void add_userIdHigh(uint64_t userIdHigh) {
    fbb_.AddElement<uint64_t>(LogicObject::VT_USERIDHIGH, userIdHigh, 0);
  }
  void add_userIdLow(uint64_t userIdLow) {
    fbb_.AddElement<uint64_t>(LogicObject::VT_USERIDLOW, userIdLow, 0);
  }
  explicit LogicObjectBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LogicObjectBuilder &operator=(const LogicObjectBuilder &);
  flatbuffers::Offset<LogicObject> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LogicObject>(end);
    return o;
  }
};

inline flatbuffers::Offset<LogicObject> CreateLogicObject(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint64_t id = 0,
    uint64_t userIdHigh = 0,
    uint64_t userIdLow = 0) {
  LogicObjectBuilder builder_(_fbb);
  builder_.add_userIdLow(userIdLow);
  builder_.add_userIdHigh(userIdHigh);
  builder_.add_id(id);
  builder_.add_name(name);
  return builder_.Finish();
}

struct LogicObject::Traits {
  using type = LogicObject;
  static auto constexpr Create = CreateLogicObject;
};

inline flatbuffers::Offset<LogicObject> CreateLogicObjectDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint64_t id = 0,
    uint64_t userIdHigh = 0,
    uint64_t userIdLow = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return rlogic_serialization::CreateLogicObject(
      _fbb,
      name__,
      id,
      userIdHigh,
      userIdLow);
}

inline const flatbuffers::TypeTable *LogicObjectTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 }
  };
  static const char * const names[] = {
    "name",
    "id",
    "userIdHigh",
    "userIdLow"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 4, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

}  // namespace rlogic_serialization

#endif  // FLATBUFFERS_GENERATED_LOGICOBJECT_RLOGIC_SERIALIZATION_H_
