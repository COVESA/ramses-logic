// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RAMSESCAMERABINDING_RLOGIC_SERIALIZATION_H_
#define FLATBUFFERS_GENERATED_RAMSESCAMERABINDING_RLOGIC_SERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

#include "logicnode_gen.h"
#include "property_gen.h"

namespace rlogic_serialization {

struct RamsesCameraBinding;
struct RamsesCameraBindingBuilder;

struct RamsesCameraBinding FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RamsesCameraBindingBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LOGICNODE = 4,
    VT_RAMSESCAMERA = 6
  };
  const rlogic_serialization::LogicNode *logicnode() const {
    return GetPointer<const rlogic_serialization::LogicNode *>(VT_LOGICNODE);
  }
  uint64_t ramsesCamera() const {
    return GetField<uint64_t>(VT_RAMSESCAMERA, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LOGICNODE) &&
           verifier.VerifyTable(logicnode()) &&
           VerifyField<uint64_t>(verifier, VT_RAMSESCAMERA) &&
           verifier.EndTable();
  }
};

struct RamsesCameraBindingBuilder {
  typedef RamsesCameraBinding Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_logicnode(flatbuffers::Offset<rlogic_serialization::LogicNode> logicnode) {
    fbb_.AddOffset(RamsesCameraBinding::VT_LOGICNODE, logicnode);
  }
  void add_ramsesCamera(uint64_t ramsesCamera) {
    fbb_.AddElement<uint64_t>(RamsesCameraBinding::VT_RAMSESCAMERA, ramsesCamera, 0);
  }
  explicit RamsesCameraBindingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RamsesCameraBindingBuilder &operator=(const RamsesCameraBindingBuilder &);
  flatbuffers::Offset<RamsesCameraBinding> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RamsesCameraBinding>(end);
    return o;
  }
};

inline flatbuffers::Offset<RamsesCameraBinding> CreateRamsesCameraBinding(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<rlogic_serialization::LogicNode> logicnode = 0,
    uint64_t ramsesCamera = 0) {
  RamsesCameraBindingBuilder builder_(_fbb);
  builder_.add_ramsesCamera(ramsesCamera);
  builder_.add_logicnode(logicnode);
  return builder_.Finish();
}

struct RamsesCameraBinding::Traits {
  using type = RamsesCameraBinding;
  static auto constexpr Create = CreateRamsesCameraBinding;
};

inline const rlogic_serialization::RamsesCameraBinding *GetRamsesCameraBinding(const void *buf) {
  return flatbuffers::GetRoot<rlogic_serialization::RamsesCameraBinding>(buf);
}

inline const rlogic_serialization::RamsesCameraBinding *GetSizePrefixedRamsesCameraBinding(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<rlogic_serialization::RamsesCameraBinding>(buf);
}

inline bool VerifyRamsesCameraBindingBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<rlogic_serialization::RamsesCameraBinding>(nullptr);
}

inline bool VerifySizePrefixedRamsesCameraBindingBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<rlogic_serialization::RamsesCameraBinding>(nullptr);
}

inline void FinishRamsesCameraBindingBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<rlogic_serialization::RamsesCameraBinding> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRamsesCameraBindingBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<rlogic_serialization::RamsesCameraBinding> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace rlogic_serialization

#endif  // FLATBUFFERS_GENERATED_RAMSESCAMERABINDING_RLOGIC_SERIALIZATION_H_
